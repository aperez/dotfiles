#+TITLE: Emacs Configuration
#+AUTHOR: Alexandre Perez
#+OPTIONS: toc:nil num:nil

This [[http://orgmode.org/][org-mode]] document contains my [[https://en.wikipedia.org/wiki/Literate_programming][literate]] Emacs configuration.

* Bootstrap =org-mode= in [[./init.el][init.el]]
  File [[./init.el][init.el]] bootsraps the configuration. It sets up =use-package= along with
  package repositories, and installs a newer version of =org-mode=. After that,
  this document is loaded and evaluated via =org-babel-load-file=.
  #+INCLUDE: init.el src emacs-lisp

* Defaults
  Emacs supports a [[https://www.emacswiki.org/emacs/EmacsClient][client-server architecture]], allowing this configuration to
  effectively be only instanced once by the Emacs server. I normally use =emacs
  --daemon= or =emacsclient -a ""= to start the server, but in case it hasn't
  started yet, let us start it now:
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

  Increase the GC threshold to 50MB (instead of 0.8MB):
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 50000000)
  #+END_SRC

  No initial startup screen. Also, clear the scratch buffer:
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  Hide the menu, toolbar and scroll bar:
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode 0)
    (scroll-bar-mode -1)
  #+END_SRC

  Stop blinking the cursor:
  #+BEGIN_SRC emacs-lisp
    (blink-cursor-mode 0)
  #+END_SRC

  Turn on syntax highlighting when available:
  #+BEGIN_SRC emacs-lisp
    (global-font-lock-mode t)
  #+END_SRC

  Use spaces instead of tabs and set tab width as 4 spaces:
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq tab-width 4)
    (setq-default c-basic-offset 4)
  #+END_SRC

  Show line numbers next to the left fringe:
  #+BEGIN_SRC emacs-lisp
    (global-linum-mode 1)
  #+END_SRC

  Highlight cursor line:
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
  #+END_SRC

  Enable soft word wrap instead of truncating lines:
  #+BEGIN_SRC emacs-lisp
    (setq-default word-wrap t)
  #+END_SRC

  Set the number of columns beyond which line-wrapping happens to 80:
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 80)
  #+END_SRC

  Delete trailing whitespace every time buffers are saved:
  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

  If the file does not end with a newline character, automatically insert one:
  #+BEGIN_SRC emacs-lisp
    (setq require-final-newline t)
  #+END_SRC

  Automatically follow symlinks:
  #+BEGIN_SRC emacs-lisp
    (setq vc-follow-symlinks t)
  #+END_SRC

  Automatically refresh the buffer if file is modified elsewhere:
  #+BEGIN_SRC emacs-lisp
    (global-auto-revert-mode t)
  #+END_SRC

  Enable =delete-selection-mode=, so that when text is inserted while a region
  is selected, the typed text replaces that region:
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode t)
  #+END_SRC

  Turn on spell checking:
  #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'flyspell-mode)
  #+END_SRC

  I don't want to type =yes/no= to confirm or cancel commands, let me just type
  =y/n=:
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  When splitting the window vertically/horizontally, change the focus to the
  newly created window:
  #+BEGIN_SRC emacs-lisp
    (defun ap/split-window-below ()
       (interactive)(split-window-below) (other-window 1))

    (defun ap/split-window-right ()
       (interactive)(split-window-right) (other-window 1))

    (global-set-key (kbd "C-x 2") 'ap/split-window-below)
    (global-set-key (kbd "C-x 3") 'ap/split-window-right)
  #+END_SRC

  Scroll up and down one line:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-p") 'scroll-down-line)
    (global-set-key (kbd "C-S-n") 'scroll-up-line)
  #+END_SRC

  Show matching parenthesis in lisp. Also, get rid of the visual delay:
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
    (setq show-paren-delay 0.0)
  #+END_SRC

  Stop creating =backup~= and =#autosave#= files. I suspect I will eventually
  turn on the backup feature, possibly using a temporary directory to store
  them, but let's leave it off for now:
  #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
  #+END_SRC

  Save Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][customizations buffer]] configurations in a separate, untracked file
  so that it doesn't clutter [[./init.el][init.el]]:
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))
  #+END_SRC

* Theming
  I like using [[http://adobe-fonts.github.io/source-code-pro/][Adobe Source Code Pro]] as my default font:
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
  #+END_SRC

  [[https://github.com/belak/base16-emacs][Base16]] default-dark theme. I find my =custom-theme-set-faces= tweaks to
  =fringe= and =linum= colors make the theme more visually appealing when
  =linum-mode= is active:
  #+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :config
      (load-theme 'base16-default-dark t)
      (custom-theme-set-faces 'base16-default-dark
        `(linum ((t (:background ,(plist-get base16-default-dark-colors :base00)
                     :foreground ,(plist-get base16-default-dark-colors :base02)))))
        `(fringe ((t (:background ,(plist-get base16-default-dark-colors :base01)))))
        ))
  #+END_SRC

  Fix the size of line numbers shown when =linum-mode= is active. Otherwise,
  when increasing the font size via =C-x C-+=, line numbers would overlap with
  the fringe ([[https://stackoverflow.com/a/33204616][more info]]).
  #+BEGIN_SRC emacs-lisp
    (defun ap/linum-update-window-scale-fix (win)
      (set-window-margins win
                          (ceiling (* (if (boundp 'text-scale-mode-step)
                                          (expt text-scale-mode-step
                                                text-scale-mode-amount) 1)
                                      (if (car (window-margins))
                                          (car (window-margins)) 1)
                                      ))))
    (advice-add #'linum-update-window :after #'ap/linum-update-window-scale-fix)
  #+END_SRC

  [[https://github.com/milkypostman/powerline][Powerline]] theme for the mode line:
  #+BEGIN_SRC emacs-lisp
    (use-package powerline
      :ensure t
      :init
      (setq powerline-default-separator 'zigzag)
      :config
      (powerline-default-theme))
  #+END_SRC

* Packages
** [[https://savannah.nongnu.org/projects/delight][Delight]]
   =delight= controls the way minor modes appear on the mode line:
   #+BEGIN_SRC emacs-lisp
     (use-package delight
       :ensure t)
   #+END_SRC

   Let's enable it in some built-in packages:
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :delight)

     (use-package autorevert
       :delight auto-revert-mode)
   #+END_SRC

** [[https://github.com/larstvei/Try][Try]]
   =try= let's me try out Emacs packages without installing them:
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** [[https://github.com/justbur/emacs-which-key][Which-key]]
   I fully recommend =which-key= to anyone starting to learn Emacs. It displays
   the keybindings following the currently entered incomplete command in a
   popup:
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :delight
       :config (which-key-mode))
   #+END_SRC

** [[https://github.com/magit/magit][Magit]]
   Use the awesome =magit= git interface:
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind ("C-x g" . magit-status))
   #+END_SRC

** [[https://github.com/abo-abo/ace-window][Ace-window]]
   I am overriding the functionality of =other-window= with =ace-window=, which
   lets you select the window you are jumping to.
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ([remap other-window] . ace-window)
       :config
       (set-face-attribute 'aw-leading-char-face nil :height 200))
   #+END_SRC

** [[https://github.com/abo-abo/swiper][Counsel and Swiper]]
   =counsel= and =swiper= enable better completion mechanisms for the
   mini-buffer and for search, respectively:
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind ("M-x" . counsel-M-x))

     (use-package swiper
       :ensure t
       :delight ivy-mode
       :bind ("C-s" . swiper)
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t))
   #+END_SRC

** [[https://github.com/abo-abo/avy][Avy]]
   =avy= allows you to jump around visible text:
   #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :bind ("M-s" . avy-goto-char-2))
   #+END_SRC

** [[https://github.com/magnars/expand-region.el][Expand-region]]
   =expand-region= increasingly expands selected text by semantic units:
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC

** [[https://melpa.org/#/undo-tree][Undo-tree]]
   =undo-tree= allows you to recover any past state of a buffer by visually
   showing a branching tree of changes:
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :delight
       :config
       (global-undo-tree-mode))
   #+END_SRC

** [[https://github.com/bbatsov/projectile][Projectile]]
   =projectile= makes navigating within projects really easy:
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :delight '(:eval (concat " P[" (projectile-project-name) "]"))
       :bind ("M-p" . projectile-command-map)
       :config
       (projectile-global-mode)
       (setq projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-on))
   #+END_SRC

** [[https://www.gnu.org/software/auctex/][Auctex]]
   Enable =auctex= package for editing LaTeX files:
   #+BEGIN_SRC emacs-lisp
     (use-package tex
       :defer t
       :ensure auctex
       :config
       (setq TeX-auto-save t)
       (setq reftex-plug-into-AUCTeX t))

     (use-package reftex
       :ensure t
       :config
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
   #+END_SRC

   I frequently use [[http://personal.psu.edu/jcc8//software/latexmk-jcc/][latexmk]] to build my latex documents, so let's enable the
   [[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]] package:
   #+BEGIN_SRC emacs-lisp
     (use-package auctex-latexmk
       :ensure t
       :pin melpa
       :config
       (auctex-latexmk-setup)
       (setq auctex-latexmk-inherit-TeX-PDF-mode t))
   #+END_SRC

   Open compiled PDF in =zathura=:
   #+BEGIN_SRC emacs-lisp
     (setq TeX-view-program-list
           '(("Zathura" "zathura --fork \"%o\"")))

     (setq TeX-view-program-selection
           '((output-pdf "Zathura")))
   #+END_SRC
** [[https://github.com/m2ym/popwin-el][Popwin]]
   =popwin= enables closing popup windows via =C-g=:
   #+BEGIN_SRC emacs-lisp
     (use-package popwin
       :ensure t
       :config
       (popwin-mode t))
   #+END_SRC

** [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][Cmake-mode]]
   =cmake-mode= is a major mode to handle CMake files:
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :ensure t)
   #+END_SRC

** [[https://github.com/yoshiki/yaml-mode][Yaml-mode]]
   Major mode for yaml files:
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

* Org-mode
  Underline links:
  #+BEGIN_SRC emacs-lisp
    (set-face-underline-p 'org-link t)
  #+END_SRC

  Open PDF links in =zathura=:
  #+BEGIN_SRC emacs-lisp
    (eval-after-load "org"
      '(progn
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps
                      '("\\.pdf::\\([0-9]+\\)\\'" . "zathura --fork \"%s\" -P %1"))
         (add-to-list 'org-file-apps
                      '("\\.pdf\\'" . "zathura --fork %s"))))
  #+END_SRC

  Allow =org-babel-execute= to evaluate python and shell code:
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (sh . t)
       ))
  #+END_SRC

  The function below attempts to strip the python prompt, as well as blank
  lines, from a results block generated by evaluating a python block ([[http://kitchingroup.cheme.cmu.edu/blog/2015/03/12/Making-org-mode-Python-sessions-look-better/][more
  info]]):
  #+BEGIN_SRC emacs-lisp
    (defun org-babel-python-strip-session-chars ()
      "Remove >>> and ... from a Python session output."
      (when (and (string=
                  "python"
                  (org-element-property :language (org-element-at-point)))
                 (string-match
                  ":session"
                  (org-element-property :parameters (org-element-at-point))))

        (save-excursion
          (when (org-babel-where-is-src-block-result)
            (goto-char (org-babel-where-is-src-block-result))
            (end-of-line 1)
            ;(while (looking-at "[\n\r\t\f ]") (forward-char 1))
            (while (re-search-forward
                    "\\(>>> \\|\\.\\.\\. \\|: $\\|: >>>$\\)"
                    (org-element-property :end (org-element-at-point))
                    t)
              (replace-match "")
              ;; this enables us to get rid of blank lines and blank : >>>
              (beginning-of-line)
              (when (looking-at "^ *$")
                (kill-line)))))))

    (add-hook 'org-babel-after-execute-hook 'org-babel-python-strip-session-chars)
  #+END_SRC

  Remove all result blocks in the current buffer:
  #+BEGIN_SRC emacs-lisp
    (defun ap/org-babel-remove-results ()
    (interactive)
      (org-babel-map-src-blocks nil (org-babel-remove-result)))
    (global-set-key (kbd "C-c C-v C-k") 'ap/org-babel-remove-results)
  #+END_SRC

  Setting the default folder for looking up agenda files:
  #+BEGIN_SRC emacs-lisp
    (setq org-directory "~/org")
    (setq org-agenda-files '("~/org"))
  #+END_SRC

  Key bindings for =org-agenda= and =org-capture=:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
  #+END_SRC

  Templates for =org-capture=:
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("w" "Schedule :work: TODO item" entry
             (file+headline "todo.org" "Todo")
             "* %iTODO %^{Todo}  :work:\n%iSCHEDULED: %^t"
             :empty-lines 1)
            ))
  #+END_SRC

* Load local configuration
  I keep local configurations that are not to be version controlled in a
  separate file:
  #+BEGIN_SRC emacs-lisp
    (setq local-file (expand-file-name "local.el" user-emacs-directory))
    (when (file-exists-p local-file)
      (load local-file))
  #+END_SRC
